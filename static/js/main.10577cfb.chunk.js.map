{"version":3,"sources":["Box.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","onClick","className","value","Board","useState","board","setBoard","nextPlayer","setNextPlayer","announceWinner","setAnnounceWinner","gameEnded","setGameEnded","useEffect","forEach","element","a","b","c","console","log","boxes","map","val","i","newBoard","splice","p","np","handleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAUeA,MARf,SAAaC,GACX,OACE,qBAAKC,QAASD,EAAMC,QAASC,UAAU,MAAvC,SACGF,EAAMG,SC4FEC,MA9Ff,WAAkB,IAAD,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KADrD,mBACRC,EADQ,KACDC,EADC,OAEqBF,mBAAS,KAF9B,mBAERG,EAFQ,KAEIC,EAFJ,OAG6BJ,mBAAS,MAHtC,mBAGRK,EAHQ,KAGQC,EAHR,OAImBN,oBAAS,GAJ5B,mBAIRO,EAJQ,KAIGC,EAJH,KAMfC,qBAAU,WAyBc,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEKC,SAAQ,SAACC,GAAa,IAAD,cACfA,EADe,GAC1BC,EAD0B,KACvBC,EADuB,KACpBC,EADoB,KAGlB,KAAbb,EAAMW,IACO,KAAbX,EAAMY,IACO,KAAbZ,EAAMa,IACNb,EAAMW,KAAOX,EAAMY,IACnBZ,EAAMW,KAAOX,EAAMa,KAEnBR,GACE,kBACE,8BACE,gCACE,mDAIN,kBAAMS,QAAQC,IAAIX,MAEpBG,GAAa,kBAAM,KACnBJ,GAAc,iBAAM,aApD1B,IAAIa,EACF,qBAAKpB,UAAU,OAAf,SACGI,EAAMiB,KAAI,SAACC,EAAKC,GAAN,OACT,cAAC,EAAD,CAAatB,MAAOG,EAAMmB,GAAIxB,QAAS,kBAK7C,SAAqBwB,GACdb,IACc,KAAbN,EAAMmB,IACRlB,GAAS,WACP,IAAMmB,EAAQ,YAAOpB,GAErB,OADAoB,EAASC,OAAOF,EAAG,EAAGjB,GACfkB,KAGXjB,GAAc,SAACmB,GAAD,OAmDlB,SAAYA,GACV,MAAU,MAANA,EAAkB,IACV,IArDWC,CAAGD,OAduBE,CAAYL,KAA/CA,QAsEhB,OACE,sBAAKvB,UAAU,YAAf,UACE,6CACA,8BAAMoB,IACN,qBAAKpB,UAAU,kBAAf,SAAkCQ,IAClC,wBAAQT,QArBZ,WACEM,GAAS,WAMP,OALAM,GAAa,WAGX,OAFAJ,GAAc,iBAAM,OACpBE,GAAkB,kBAAM,SACjB,KAEF,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAcRT,UAAU,MAA1C,SACIU,EAAsB,aAAV,cCjFPmB,MARf,WACE,OACE,qBAAK7B,UAAU,QAAf,SACE,cAAC,EAAD,CAAOA,UAAU,iBCOR8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKzC,UAAU,UAEjB0C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10577cfb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Box(props) {\r\n  return (\r\n    <div onClick={props.onClick} className=\"box\">\r\n      {props.value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Box from \"./Box\";\r\n\r\nfunction Board() {\r\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [nextPlayer, setNextPlayer] = useState(\"O\");\r\n  const [announceWinner, setAnnounceWinner] = useState(null);\r\n  const [gameEnded, setGameEnded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkWinner();\r\n  });\r\n  let boxes = (\r\n    <div className=\"grid\">\r\n      {board.map((val, i) => (\r\n        <Box key={i} value={board[i]} onClick={() => handleClick(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  function handleClick(i) {\r\n    if (!gameEnded) {\r\n      if (board[i] === \"\") {\r\n        setBoard(() => {\r\n          const newBoard = [...board];\r\n          newBoard.splice(i, 1, nextPlayer);\r\n          return newBoard;\r\n        });\r\n      }\r\n      setNextPlayer((p) => np(p));\r\n    }\r\n  }\r\n\r\n  function checkWinner() {\r\n    const winningValues = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    winningValues.forEach((element) => {\r\n      const [a, b, c] = element;\r\n      if (\r\n        board[a] !== \"\" &&\r\n        board[b] !== \"\" &&\r\n        board[c] !== \"\" &&\r\n        board[a] === board[b] &&\r\n        board[a] === board[c]\r\n      ) {\r\n        setAnnounceWinner(\r\n          () => (\r\n            <div>\r\n              <blink>\r\n                <h1>GAME OVER!</h1>\r\n              </blink>\r\n            </div>\r\n          ),\r\n          () => console.log(announceWinner)\r\n        );\r\n        setGameEnded(() => true);\r\n        setNextPlayer(() => \"\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleRestart() {\r\n    setBoard(() => {\r\n      setGameEnded(() => {\r\n        setNextPlayer(() => \"O\");\r\n        setAnnounceWinner(() => null);\r\n        return false;\r\n      });\r\n      return [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    });\r\n  }\r\n\r\n  function np(p) {\r\n    if (p === \"O\") return \"X\";\r\n    else return \"O\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>TIC-TAC-TOE</h1>\r\n      <div>{boxes}</div>\r\n      <div className=\"announce-winner\">{announceWinner}</div>\r\n      <button onClick={handleRestart} className=\"btn\">\r\n        {!gameEnded ? \"RESET\" : \"PLAY AGAIN\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"board\">\n      <Board className=\"app-board\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className=\"app\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}